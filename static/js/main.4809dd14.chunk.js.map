{"version":3,"sources":["components/Cards/Cards.js","components/Header/Header.js","components/Container/Container.js","components/Footer/Footer.js","App.js","serviceWorker.js","index.js"],"names":["cards","props","react_default","a","createElement","Image","onClick","handleClicked","clicked","id","src","image","alt","className","responsive","Header","state","scores","highscores","Container","children","footer","App","suffle","j","x","i","length","Math","floor","random","click","console","log","_this$state","_this","setState","_this2","this","components_Header_Header","components_Container_Container","map","card","Cards_Cards","key","name","Footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ytEASeA,SALD,SAAAC,GACV,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAOC,QAAS,kBAAIL,EAAMM,cAAcN,EAAMO,QAAQP,EAAMQ,KAAKC,IAAKT,EAAMU,MAAOC,IAAI,QAAQC,UAAU,qBAAqBC,YAAU,MCcjIC,SAjBA,SAAAd,GAAK,OAChBC,EAAAC,EAAAC,cAAA,OAAKS,UAAU,0BACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,wEAAwEJ,GAAG,YACtFP,EAAAC,EAAAC,cAAA,QAAMS,UAAU,mEAAhB,eACAX,EAAAC,EAAAC,cAAA,QAAMS,UAAU,mEAAhB,4BACAX,EAAAC,EAAAC,cAAA,QAAMS,UAAU,sDAAhB,SAA4EZ,EAAMe,MAAMC,OAAxF,cAA2GhB,EAAMe,MAAME,aAE3HhB,EAAAC,EAAAC,cAAA,OAAKS,UAAU,mDACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,aACXX,EAAAC,EAAAC,cAAA,OAAKS,UAAU,+BACXX,EAAAC,EAAAC,cAAA,4CCRLe,SAFE,SAAAlB,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKS,UAAU,WAAWZ,EAAMmB,YCM3CC,SAND,SAAApB,GAAK,OACfC,EAAAC,EAAAC,cAAA,yBCwEWkB,oNAnEbN,MAAQ,CACNhB,QACAiB,OAAQ,EACRC,WAAY,KAEdK,OAAO,SAAAvB,GACL,IAAIwB,EAAGC,EAAGC,EACV,IAAKA,EAAI1B,EAAM2B,OAAS,EAAGD,EAAI,EAAGA,IAC9BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAIzB,EAAM0B,GACV1B,EAAM0B,GAAK1B,EAAMwB,GACjBxB,EAAMwB,GAAKC,EAEf,OAAOzB,KAGTO,cAAgB,SAACwB,EAAMtB,GACrBuB,QAAQC,IAAIF,GADgB,IAAAG,EAEOC,EAAKnB,MAAlChB,EAFsBkC,EAEtBlC,MAAOiB,EAFeiB,EAEfjB,OAAQC,EAFOgB,EAEPhB,WAIrB,GAHAc,QAAQC,IAAIjC,GACZgC,QAAQC,IAAIhB,GAED,SAARc,EAAe,CACbd,EAAOC,IACRA,EAAWD,EACXe,QAAQC,IAAIf,IAEd,IAAI,IAAIQ,EAAE,EAAEA,EAAE1B,EAAM2B,OAAOD,IACzB1B,EAAM0B,GAAGlB,QAAQ,QAEnBS,EAAO,EACPe,QAAQC,IAAI,gBAGZjC,EAAMS,GAAID,QAAQ,OAClBS,IACAe,QAAQC,IAAI,cAEdjC,EAAMmC,EAAKZ,OAAOvB,GAClBmC,EAAKC,SAAS,CAACpC,QAAOiB,SAAQC,wFAIvB,IAAAmB,EAAAC,KACP,OACEpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACmC,EAAD,CAAQvB,MAAOsB,KAAKtB,QAEpBd,EAAAC,EAAAC,cAACoC,EAAD,KACGF,KAAKtB,MAAMhB,MAAMyC,IAAI,SAAAC,GAAI,OAAKxC,EAAAC,EAAAC,cAACuC,EAAD,CAC7BC,IAAKF,EAAKjC,GACVF,cAAe8B,EAAK9B,cACpBE,GAAIiC,EAAKjC,GACToC,KAAMH,EAAKG,KACXlC,MAAO+B,EAAK/B,MACZH,QAASkC,EAAKlC,aAKlBN,EAAAC,EAAAC,cAAC0C,EAAD,cA7DUC,cCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOpD,EAAAC,EAAAC,cAACmD,EAAD,MAASC,SAASC,eAAe,SDuH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4809dd14.chunk.js","sourcesContent":["import React from \"react\";\nimport { Image } from \"react-bootstrap\"\nimport \"./Cards.css\";\n\nconst cards = props => {\n    return (\n        <Image onClick={()=>props.handleClicked(props.clicked,props.id)} src={props.image} alt=\"cards\" className=\"border border-dark\" responsive />\n    )\n};\nexport default cards;","import React from \"react\";\nimport \"./Header.css\"\n\nconst Header = props => (\n    <div className=\"bg-info border rounded\">\n        <nav className=\"navbar navbar-light row justify-cotent-md-center border border-bottom\" id=\"override\">\n            <span className=\"navbar-band h3 col col-lg-4 text-center border-right text-white\">Clicky Game</span>\n            <span className=\"navbar-band h3 col col-lg-4 text-center border-right text-white\">Click an Image to begin!</span>\n            <span className=\"navbar-band h3 col col-lg-4 text-center text-white\">Score:{props.state.scores}|Top Score:{props.state.highscores}</span>\n        </nav>\n        <div className=\"jumbotron jumbotron-fluid middleSection rounded\">\n            <div className=\"container\">\n                <div className=\"rows text-white text-center\">\n                    <h1>This is the clicky game!</h1>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nexport default Header;","import React from \"react\";\nimport \"./Container.css\";\n\nconst Container =props=>( <div className=\"contain\">{props.children}</div>\n)\nexport default Container;","import React from \"react\";\nimport \"./Foot.css\";\n\nconst footer =props=>(\n    <footer>\n\n    </footer>\n);\n\nexport default footer;","import React, { Component } from 'react';\nimport Cards from \"./components/Cards/Cards.js\";\nimport Header from \"./components/Header\";\nimport Container from \"./components/Container\";\nimport Footer from \"./components/Footer\"\nimport cards from \"./cards.json\";\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    cards,\n    scores: 0,\n    highscores: 0\n  }\n  suffle=cards=>{\n    var j, x, i;\n    for (i = cards.length - 1; i > 0; i--) {\n        j = Math.floor(Math.random() * (i + 1));\n        x = cards[i];\n        cards[i] = cards[j];\n        cards[j] = x;\n    }\n    return cards;\n  }\n\n  handleClicked = (click,id) => {\n    console.log(click)\n    let { cards, scores, highscores} = this.state;\n    console.log(cards)\n    console.log(scores)\n    \n    if(click===\"true\"){\n      if(scores>highscores){\n        highscores=scores\n        console.log(highscores)\n      }\n      for(var i=0;i<cards.length;i++){\n        cards[i].clicked=\"false\";\n      }\n      scores=0;\n      console.log(\"clicked\")\n    }\n    else{\n      cards[id].clicked=\"true\"\n      scores++;\n      console.log(\"nonclicked\")\n    }\n    cards=this.suffle(cards);\n    this.setState({cards, scores, highscores});\n  }\n\n\n  render() {\n    return (\n      <div>\n        <Header state={this.state}\n        ></Header>\n        <Container>\n          {this.state.cards.map(card => (<Cards\n            key={card.id}\n            handleClicked={this.handleClicked}\n            id={card.id}\n            name={card.name}\n            image={card.image}\n            clicked={card.clicked}\n          />\n          ))\n          }\n        </Container>\n        <Footer></Footer>\n      </div>\n\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}